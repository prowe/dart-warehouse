Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Parameters:
  ImageTag:
    Type: String

Globals:
  Function:
    Runtime: python3.9

Resources:
  ResourceGroup:
    Type: "AWS::ResourceGroups::Group" 
    Properties:
      Name: !Ref AWS::StackName
      Description: "Resources for the dart_datalake POC"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
        Query:
          StackIdentifier: !Ref AWS::StackId

  DataBucket:
    Type: AWS::S3::Bucket

  DeliveryStreamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:GetBucketLocation"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:PutObject"
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub "${DataBucket.Arn}/*"
  
  VehiclePositionDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt DataBucket.Arn
        RoleARN: !GetAtt DeliveryStreamRole.Arn
        Prefix: "vehicle_position_events/!{timestamp:yyyy}-!{timestamp:MM}/"
        ErrorOutputPrefix: errors/vehicle_position_events
        BufferingHints:
          IntervalInSeconds: 900

  PollVehiclePositions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: poll_dart_functions
      Handler: poll_vehicle_positions.handler
      MemorySize: 256
      Timeout: 15
      Environment:
        Variables:
          STREAM_NAME: !Ref VehiclePositionDeliveryStream
      Policies:
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action: "firehose:PutRecordBatch"
              Resource: !GetAtt VehiclePositionDeliveryStream.Arn
      Events:
        PollPositionsEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(1 minute)"

  Database:
    Type: AWS::Glue::Database
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseInput: 
        Name: dart_lake
        Description: Holds DART transit data (Paul R)
        LocationUri: !Sub "s3://${DataBucket}/"

  AthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: dart_lake
      Description: Workgroup for querying the DART DataLake
      State: ENABLED
      WorkGroupConfiguration:
        EngineVersion:
          SelectedEngineVersion: "Athena engine version 3"
        EnforceWorkGroupConfiguration: false
        ResultConfiguration:
          OutputLocation: !Sub "s3://${DataBucket}/query_results/"

  GlueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - glue.amazonaws.com
                - "elasticmapreduce.amazonaws.com"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AwsGlueSessionUserRestrictedServiceRole
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:passRole #This allows passing a role to itself?
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !GetAtt DataBucket.Arn
                  - !Sub "${DataBucket.Arn}/*"

  VehiclePositionEventsTable:
    Type: AWS::Glue::Table
    Properties: 
      CatalogId: !Ref AWS::AccountId
      DatabaseName: !Ref Database
      TableInput:
        Name: vehicle_position_events
        TableType: EXTERNAL_TABLE
        Description: Raw events as ingested by the polling Lambda
        PartitionKeys:
          - Name: injest_year_month
            Type: string
        Parameters:
          "projection.enabled": "true"
          "projection.injest_year_month.type": "date"
          "projection.injest_year_month.format": "yyyy-MM"
          "projection.injest_year_month.range": "2023-04,NOW"
          "projection.injest_year_month.interval": "1"
          "projection.injest_year_month.interval.unit": "MONTHS"
          "storage.location.template": !Sub "s3://${DataBucket}/vehicle_position_events/${!injest_year_month}/"
        StorageDescriptor:
          Location: !Sub "s3://${DataBucket}/vehicle_position_events/"
          Columns:
            - Name: timestamp
              Type: string
            - Name: trip
              Type: struct<tripId:string,startDate:string,routeId:string,directionId:int,scheduleRelationship:string>
            - Name: position
              Type: struct<latitude:double,longitude:double,bearing:double,speed:double>
            - Name: vehicle
              Type: struct<id:string,label:string>
            - Name: occupancystatus
              Type: string
          Parameters:
            classification: json
            typeOfData: file
            compressionType: none
          InputFormat: org.apache.hadoop.mapred.TextInputFormat
          OutputFormat: org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat
          SerdeInfo:
            SerializationLibrary: "org.openx.data.jsonserde.JsonSerDe"

  InjestPartitionCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Role: !GetAtt GlueRole.Arn
      Targets:
        CatalogTargets:
          - DatabaseName: !Ref Database
            Tables:
              - !Ref VehiclePositionEventsTable
      SchemaChangePolicy:
        DeleteBehavior: LOG
        UpdateBehavior: LOG
      # RecrawlPolicy:
      #   RecrawlBehavior: CRAWL_NEW_FOLDERS_ONLY
      Configuration:
        Fn::ToJsonString:
          Version: 1.0
          CrawlerOutput:
            Partitions:
              AddOrUpdateBehavior: InheritFromTable
          Grouping:
            TableGroupingPolicy: CombineCompatibleSchemas

  # DBTTaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: sts:AssumeRole
  #           Condition:
  #             StringEquals:
  #               "aws:SourceAccount": !Ref AWS::AccountId
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  #       - arn:aws:iam::aws:policy/AmazonECS_FullAccess
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action: "secretsmanager:GetSecretValue"
  #               Resource: !GetAtt RDSCluster.MasterUserSecret.SecretArn

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE

  # DBTTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     Family: dart-warehouse-dbt
  #     Cpu: 512
  #     Memory: 1024
  #     NetworkMode: awsvpc
  #     RequiresCompatibilities:
  #       - FARGATE
  #     TaskRoleArn: !GetAtt DBTTaskRole.Arn
  #     ExecutionRoleArn: !GetAtt DBTTaskRole.Arn
  #     ContainerDefinitions:
  #       - Name: dbt
  #         Image: !Sub "ghcr.io/sourceallies/dart-warehouse/dbt:${ImageTag}"
  #         Command:
  #           - build
  #         Environment:
  #           - Name: DBT_LOG_FORMAT
  #             Value: json
  #           - Name: DBT_HOST
  #             Value: !GetAtt RDSCluster.Endpoint.Address
  #         Secrets:
  #           - Name: DBT_USER
  #             ValueFrom: !Sub "${RDSCluster.MasterUserSecret.SecretArn}:username::" 
  #           - Name: DBT_PASSWORD
  #             ValueFrom: !Sub "${RDSCluster.MasterUserSecret.SecretArn}:password::"
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref LogGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: dbt

  # StateMachineRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: states.amazonaws.com
  #           Action: sts:AssumeRole
  #           Condition:
  #             StringEquals:
  #               "aws:SourceAccount": !Ref AWS::AccountId
  #     Policies:
  #       - PolicyName: runtasks
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:*
  #                 - events:PutTargets
  #                 - events:PutRule
  #                 - events:DescribeRule
  #               Resource: "*"
  #             - Effect: Allow
  #               Action: iam:PassRole
  #               Resource: !GetAtt DBTTaskRole.Arn

  # WarehouseBuildStateMachine:
  #   Type: AWS::StepFunctions::StateMachine
  #   Properties:
  #     RoleArn: !GetAtt StateMachineRole.Arn
  #     Definition:
  #       StartAt: RunDBT
  #       States:
  #         RunDBT:
  #           Type: Task
  #           End: true
  #           Resource: "arn:aws:states:::ecs:runTask.sync"
  #           TimeoutSeconds: 1800 # 30min
  #           Retry:
  #             - ErrorEquals: [ "States.ALL" ]
  #               MaxAttempts: 5
  #           Parameters:
  #             Cluster: !GetAtt Cluster.Arn
  #             TaskDefinition: !Ref DBTTaskDefinition
  #             LaunchType: FARGATE
  #             NetworkConfiguration:
  #               AwsvpcConfiguration:
  #                 AssignPublicIp: ENABLED
  #                 Subnets:
  #                   - subnet-d30953b4
  #                   - subnet-86c62ccb
  #                   - subnet-51001c5e
  #                   - subnet-b3092eef
  #                   - subnet-29b0de17
  #                   - subnet-3b103115

  # SchedulerRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: scheduler.amazonaws.com
  #           Action: sts:AssumeRole
  #           Condition:
  #             StringEquals:
  #               "aws:SourceAccount": !Ref AWS::AccountId
  #     Policies:
  #       - PolicyName: runtasks
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ecs:RunTask
  #               Resource: "*"
  #             - Effect: Allow
  #               Action: states:*
  #               Resource: !Ref WarehouseBuildStateMachine

  # WarehouseBuildSchedule:
  #   Type: AWS::Scheduler::Schedule
  #   Properties:
  #     Description: Runs the DART Warehouse build process
  #     ScheduleExpression: "cron(0 10 * * ? *)"
  #     ScheduleExpressionTimezone: "America/Chicago"
  #     FlexibleTimeWindow: 
  #       Mode: "OFF"
  #     Target:
  #       Arn: !Ref WarehouseBuildStateMachine
  #       RoleArn: !GetAtt SchedulerRole.Arn
  #       Input: "{}"

Outputs:
  DeliveryStream:
    Value: !Ref VehiclePositionDeliveryStream
  GlueRole:
    Value: !GetAtt GlueRole.Arn